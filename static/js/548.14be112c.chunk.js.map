{"version":3,"file":"static/js/548.14be112c.chunk.js","mappings":"oPAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtBC,EAAgB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAIrBC,GAAyBC,EAAAA,EAAAA,IACpC,CAACP,EAHyB,SAAAC,GAAK,OAAIA,EAAMO,MAAV,IAI/B,SAACN,EAAUM,GACT,OAAON,EAASM,QAAO,SAAAC,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cADf,GAG/B,I,mBCXUE,EAAOC,EAAAA,GAAAA,GAAH,mGAMJC,EAASD,EAAAA,GAAAA,OAAH,6KAUNE,EAAcF,EAAAA,GAAAA,GAAH,sH,SCbXG,EAAc,WACzB,IAAMf,GAAWgB,EAAAA,EAAAA,IAAYZ,GAEvBa,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACP,EAAD,UACGX,EAASmB,KAAI,gBAAGC,EAAH,EAAGA,GAAIZ,EAAP,EAAOA,KAAMa,EAAb,EAAaA,OAAb,OACZ,UAACP,EAAD,YACE,yBACGN,EADH,KACWa,MAEX,SAACR,EAAD,CAAQS,KAAK,SAASC,QAAS,kBAAMN,GAASO,EAAAA,EAAAA,IAAcJ,GAA7B,EAA/B,sBAJgBA,EADN,KAYnB,E,mBCtBYK,EAAOb,EAAAA,GAAAA,KAAH,mGAMJc,EAAQd,EAAAA,GAAAA,MAAH,gNAYLe,EAAQf,EAAAA,GAAAA,MAAH,iHAOLC,EAASD,EAAAA,GAAAA,OAAH,uRCpBNgB,EAAc,WACzB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOrB,EAAP,KAAasB,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOR,EAAP,KAAeU,EAAf,KAEM/B,GAAWgB,EAAAA,EAAAA,IAAYlB,GACvBmB,GAAWC,EAAAA,EAAAA,MAEXc,EAAW,SAAAC,GACf,MAAwBA,EAAEC,cAAlB1B,EAAR,EAAQA,KAAM2B,EAAd,EAAcA,MAEd,OAAQ3B,GACN,IAAK,OACHsB,EAAQK,GACR,MAEF,IAAK,SACHJ,EAAUI,GACV,MAEF,QACE,OAEL,EAoBKC,EAAQ,WACZN,EAAQ,IACRC,EAAU,GACX,EAED,OACE,UAACN,EAAD,CAAMY,SAxBa,SAAAJ,GACnBA,EAAEK,iBACF,IAAM/B,EAAU,CACdC,KAAAA,EACAa,OAAAA,GAGIkB,EAAgBvC,EAASwC,MAC7B,SAAAjC,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBD,EAAKC,aAAxC,IAGT8B,EACIE,EAAAA,GAAAA,MAAA,UAAejC,EAAf,6BACAS,GAASyB,EAAAA,EAAAA,IAAWnC,IAExB6B,GACD,EAQC,WACE,UAACT,EAAD,mBAEE,SAACD,EAAD,CACES,MAAO3B,EACPwB,SAAUA,EACVV,KAAK,OACLd,KAAK,OACLmC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,UAAClB,EAAD,qBAEE,SAACD,EAAD,CACES,MAAOd,EACPW,SAAUA,EACVV,KAAK,MACLd,KAAK,QACLmC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,SAAC,KAAD,CAASC,SAAS,aAAaC,cAAc,KAE7C,SAAC,EAAD,CAAQzB,KAAK,SAAb,2BAGL,EC9Ec,SAAS0B,IACtB,IAAM/B,GAAWC,EAAAA,EAAAA,MACXf,GAAYa,EAAAA,EAAAA,IAAYd,GAM9B,OAJA+C,EAAAA,EAAAA,YAAU,WACRhC,GAASiC,EAAAA,EAAAA,MACV,GAAE,CAACjC,KAGF,iCACE,0BACE,6CAEF,SAACW,EAAD,KACA,yBAAMzB,GAAa,4BACnB,SAACY,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  background-color: #eaf2f8;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Button = styled.button`\n  background-color: #e5e7e9;\n  :hover {\n    background-color: #33beff;\n  }\n  border-radius: 4px;\n  border: 1px solid #d6dbdf;\n  padding: 4px;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  padding: 8px;\n  justify-content: space-between;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { List, Button, ContactItem } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => (\n        <ContactItem key={id}>\n          <p>\n            {name}: {number}\n          </p>\n          <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            Delete\n          </Button>\n        </ContactItem>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  background-color: #eaf2f8;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Input = styled.input`\n  font-size: 14px;\n  padding: 8px;\n  border: 2px solid #d5d8dc;\n  outline: transparent;\n  border-radius: 4px;\n  margin-top: 4px;\n  :focus {\n    border: 2px solid #33beff;\n  }\n`;\n\nexport const Label = styled.label`\n  font-size: 16px;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n`;\n\nexport const Button = styled.button`\n  font-size: 16px;\n  width: 130px;\n  padding: 8px;\n  margin-right: auto;\n  margin-left: auto;\n  margin-bottom: 28px;\n  background-color: #e5e7e9;\n  border: 1px solid #d6dbdf;\n  border-radius: 4px;\n  :hover {\n    background-color: #33beff;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Toaster, toast } from 'react-hot-toast';\nimport { Form, Label, Input, Button } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    const contact = {\n      name,\n      number,\n    };\n\n    const checkContacts = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    checkContacts\n      ? toast.error(`${name} is already in contacts.`)\n      : dispatch(addContact(contact));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={onFormSubmit}>\n      <Label>\n        Name\n        <Input\n          value={name}\n          onChange={onChange}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          value={number}\n          onChange={onChange}\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <Toaster position=\"top-center\" reverseOrder={false} />\n\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div>\n        <h2>Your contacts</h2>\n      </div>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectLoading","isLoading","selectFilteredContacts","createSelector","filter","contact","name","toLowerCase","includes","List","styled","Button","ContactItem","ContactList","useSelector","dispatch","useDispatch","map","id","number","type","onClick","deleteContact","Form","Input","Label","ContactForm","useState","setName","setNumber","onChange","e","currentTarget","value","reset","onSubmit","preventDefault","checkContacts","some","toast","addContact","pattern","title","required","position","reverseOrder","Contacts","useEffect","fetchContacts"],"sourceRoot":""}